#!/usr/bin/env python
# need to set PYTHONSTARTUP=~/.pythonrc  in shell to get this to run
# I also use in ipython, via "execfile ~/.pythonrc" in ~/.ipython/ipythonrc
from __future__ import division
import sys, os, atexit

try:
    __IPYTHON__
    os.environ['PAGER'] = "less -r"
except NameError:
    histfile_path = os.environ["HOME"] + "/.python_history"
    if not os.path.exists(histfile_path): open(histfile_path, "w").close()
    histfile = histfile_path
    try:
        import readline
        readline.read_history_file(histfile)
    except ImportError:
        print "Module readline not available."
    else:
        import rlcompleter
        readline.parse_and_bind("tab: complete")

    atexit.register(readline.write_history_file, histfile)
    del histfile

# nice to have stdout unbuffered.  but needs to be idempotent
if "<fdopen>" not in str(sys.stdout):
  sys.stdout = os.fdopen(1,'w',0)


## I think it's nice to have lots of crap in the global namespace by default

#from urllib2 import urlopen
import re
#from copy import copy, deepcopy
from pprint import pprint
#from datetime import datetime,timedelta
from collections import defaultdict
import itertools
import time
import random
import subprocess


def join(seq, sep=" "):
  " because str.join() is annoying "
  return sep.join(str(x) for x in seq)

def uniq_c(seq):
  ret = defaultdict(lambda:0)
  for x in seq:
    ret[x] += 1
  return dict(ret)

def flatten(iter):
  return list(itertools.chain(*iter))

def flip(pairs):
  return [(y,x) for x,y in pairs]

T = True
F = False