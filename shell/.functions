mkcd() {
    mkdir -p "$1" && cd "$1";
}

###
##Package management functions follow
###

#Install a package
i() {
    local COMMAND=""
    if [[ $(command -v apt-get != "") ]]; then
        COMMAND="apt-get install "
    else
        echo "No package manager I know installed, exiting"
        return 0
    fi
    if [[ "$UID" != 0 ]]; then
        if [[ $(command -v sudo != "") ]]; then
            COMMAND="sudo "$COMMAND;
        elif [[ $(command -v su != "") ]]; then
            echo "You don't have sudo installed, using su; Type root password to continue";
            COMMAND="su -c \""$COMMAND:"\"";
        else
            echo "Error, no su or sudo present, don't know what to do";
        fi
    fi
    COMMAND=$COMMAND$*
    eval $COMMAND
}

#Uninstall a package
ui() {
    local COMMAND=""
    if [[ $(command -v apt-get != "") ]]; then
        COMMAND="apt-get remove "
    else
        echo "No package manager I know installed, exiting"
        return 0
    fi
    if [ "$UID" != 0 ]; then
        if [[ $(command -v sudo != "") ]]; then
            COMMAND="sudo "$COMMAND;
        elif [[ $(command -v su != "") ]]; then
            echo "You don't have sudo installed, using su; Type root password to continue";
            COMMAND="su -c \""$COMMAND:"\"";
        else
            echo "Error, no su or sudo present, don't know what to do";
        fi
    fi
    COMMAND=$COMMAND$*
    eval $COMMAND
}

#Find a package
fp() {
    local COMMAND=""
    if [[ $(command -v apt-cache != "") ]]; then
        COMMAND="apt-cache search "
    else
        echo "No package manager I know installed, exiting"
        return 0
    fi
    COMMAND=$COMMAND$*
    eval $COMMAND
}

#Launch torrents :3
t() {
    if [[ -d "/media/You will die" ]] ; then
        if [ "$(ps -ef | grep -c deluged)" = 1 ]; then
            deluged;
        fi
        deluge-console;
    else
        echo "Your trololent drive is not mounted!"
    fi
}

#View a website in links2
glinks() {
    local COMMAND="links2"
    if [[ $DISPLAY != "" ]] ; then
        COMMAND="$COMMAND -g"
    fi
    if [[ $* == "" ]] ; then
        COMMAND="$COMMAND 'www.google.com'"
    else
        COMMAND="$COMMAND '$*'"
    fi
    if [[ $DISPLAY != "" ]] ; then
        COMMAND="$COMMAND &"
    fi
    eval $COMMAND
}
#Or directly google something
google() {
    local TARGET='http://www.google.com/search?q='$*;
    glinks $TARGET;
}

#Or wiki it
wiki() {
    local TARGET='http://en.wikipedia.org/wiki/Special:Search?search='$*;
    glinks $TARGET;
}

#I think this deserves "Hack of the century award"
flvsave() {
    if [[ $1 == "" ]] ; then
        local SAVE_DIR="/home/$USERNAME/Downloads/flash"
    else
        local SAVE_DIR="$1"
    fi
    if [[ ! -d "$SAVE_DIR" ]] ; then
        mkdir "$SAVE_DIR";
    fi
    local FLV_STREAM_COUNT=$(lsof +L1 -anPT | grep FlashXX | wc -l);
    if [[ $FLV_STREAM_COUNT > 0 ]] ; then
        if [[ $FLV_STREAM_COUNT == 1 ]] ; then
            echo "Found one open flash stream:";
        else
            echo "Found $FLV_STREAM_COUNT flash videos being streamed:";
        fi
        eval $(lsof +L1 | grep FlashXX | awk '{ print "export " substr($10, 6) "=" $7 ";"; }') #Save video sizes into environment variables
        sleep 2; #Wait a bit so they can load if they're still loading
        echo "Videos still loading:"
        lsof +L1 | grep FlashXX | awk 'ENVIRON[substr($10, 6)] != $7 {
            print "  " $2 "/" $1 " " $10 " (" $7 / 1024 / 1024 " MiB+)";
        }'
        echo "Fully loaded videos:";
        lsof +L1 | grep FlashXX | awk 'ENVIRON[substr($10, 6)] == $7 {
            print "  " $2 "/" $1 " " $10 " (" $7 / 1024 / 1024 " MiB)";
        }' #Check if video sizes are still the same
        echo "Saving fully loaded videos to $SAVE_DIR";

        lsof +L1 -anPT | grep FlashXX | awk -v save_dir=$SAVE_DIR 'ENVIRON[substr($10, 6)] == $7 {
            print "cp -n /proc/" $2 "/fd/" substr($4, 1, length($4)-1) " " save_dir "/" substr($10, 13) ".flv";
        }' | sh;

        echo "Done";
    fi
}

ccat() {
    src-hilite-lesspipe.sh $1;
}

cless() {
    HIGHLIGHTED_TEXT=$(source-highlight -f esc -i $1)
    if [[ "$?" == "0" ]] ; then
        echo "$HIGHLIGHTED_TEXT" | less -R
    else
        less $1
    fi
}

# Nicked from someone else, TODO: Dissect this bash wizardry
archive() {
    local format="$1"
    local output="$2"
    local input=( "${@:3}" )
    case "$format" in
        gz )
            tar -czvf "${output}.tar.gz" "${input[@]}";;
        7z )
            7za a "${output}.7z" "${input[@]}";;
        zip )
            zip -r "${output}.zip" "${input[@]}" ;;
    esac
}

swap() {
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE && mv "$2" "$1" && mv $TMPFILE "$2"
}

zipdirs() {
    ls -1 --color=never | awk '{print "zip -r \"" $0 ".zip\" \"" $0 "\""}' | sh
}

pause() {
    for pname in $@ ; do
        pkill -SIGSTOP $pname;
    done
}

resume() {
    for pname in "$@" ; do
        pkill -SIGCONT $pname
    done
}

toggle() {
    local STATE=""
    local PID_LIST=""
    local i=0
    for pname in "$@" ; do
        for pid in $(ps -eo pid,comm | grep "$pname" | grep -v "defunct" | awk '{print $1}') ; do
            #echo $pname":"$pid
            PID_LIST="$PID_LIST$pname:$pid "
        done
    done
    for pid_name in $(echo $PID_LIST) ; do
        local PNAME=$(echo $pid_name | awk -F: '{print $1}')
        local PID=$(echo $pid_name | awk -F: '{print $2}')

        if [[ $PID != "" ]] ; then
            if [[ $STATE == "" ]] ; then
                STATE=$(cat /proc/$PID/status | grep "State:" | awk '{print $2}')
            fi

            local RETCODE=0

            #T for paused, R for running
            if [[ $STATE == "T" ]] ; then
                kill -SIGCONT $PID
                RETCODE="$?"
                echo -n "Resuming "$C_YELLOW"$pid_name"
            else
                kill -SIGSTOP $PID
                RETCODE="$?"
                echo -n "Pausing "$C_CYAN"$pid_name"
            fi
            if [[ $RETCODE != 0 ]] ; then
                echo $C_NONE" ["$E_BOLD$C_RED"Failure"$C_NONE"]"
            else
                echo $C_NONE" ["$E_BOLD$C_GREEN"Success"$C_NONE"]"
            fi
        fi
    done
}

CPU_HOGS="conky tmux_network_us"
CPU_HOGS="$CPU_HOGS chromium firefox firefox-esr epiphany-browser"
CPU_HOGS="$CPU_HOGS steam rambox dropbox"
CPU_HOGS="$CPU_HOGS apt-get dpkg rred"

hogs() {
    toggle $(echo $CPU_HOGS)
}

new_session() {
    DNUM=`echo $DISPLAY | sed 's/\..*$//'`
    echo reserve > /var/run/xdmctl/xdmctl-$DNUM
}

remount() {
    sudo umount "/media/asmageddon/You will die"
    sudo umount "/media/asmageddon/UWAGA - Menele"
    sudo mount /dev/sdc2 "/media/You will die"
    sudo mount /dev/sdc1 "/media/UWAGA - Menele"
}

url_encode() {
    echo $1 | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g'
}

#TODO: multiless

multiless() {
    find -L . -maxdepth 1 -type f | sed s:\./::g | xargs -0r echo | less
}

b() {
    nohup "$@" > /dev/null &
}

# /dev/disk/* # Volumes listed by various shits
# ls -l /dev/disk/by-label/ #
# findmnt - filesystem mountpoint structure
# cat /proc/mounts | grep "/dev/sd" | grep "/media/" # Alternatively, /etc/mtab - for mounts managed by mount/umount
# PID = lsof -t /media/volume; ps -q $PID -o pid=,comm= # Warning actually there's likely to be many pids

# Print list of processes using each of the given volumes
function open_in() {
    for VOLUME in "$@" ; do
        local DONE=""
        for PID in $(lsof -t $VOLUME) ; do
            if [[ $DONE == "" ]] ; then
                printf "'%s' is in use by: \n" "$VOLUME"
                DONE="yes"
            fi
            ps -q $PID -o pid:6=,user:16=,comm= | awk '{print "    "$0}'
        done
    done
}

# Print list of processes using each of every volume mounted in /media
volume_use() {
    local MOUNTPOINTS=`cat /proc/mounts | grep "/dev/sd" | grep "/media/" | awk '{print $2}'`
    while read -r vol; do
        open_in "$(echo -e $vol)"
    done <<< "$MOUNTPOINTS"
}

# Launch a program completely detached from the current shell
launch() {
    setsid $@ >/dev/null 2>&1 < /dev/null &
}

bpgrep() {
  ps -eo pid,args | grep "$@" | grep -v "^\s*[0-9]*\s*grep"
}

run() {
    # TODO: Check if the command is available with command -v and PWD file check
    # bpgrep $1
    if [[ "$(bpgrep $1)" == "" ]] ; then
        echo "Launching: '$@'"
        launch $@
    else
        echo "Already running: '$1' ('$@')"
    fi
}

brightness() {
    local DISPLAY_OUTPUT=$(xrandr -q | grep ' connected' | head -n 1 | cut -d ' ' -f1)
    xrandr --output "$DISPLAY_OUTPUT" --brightness $1
}

function join_by { local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}"; }

# WIP: Use xkb to configure this better (5 as LMB always, 0 as RMB, Plus/Minus as scrollwheel)
nummouse() {
    # Note: If I ever feel like it or need to, configuring info on: https://wiki.archlinux.org/index.php/X_keyboard_extension#Mouse_control
    setxkbmap -option keypad:pointerkeys
    echo "Press Shift+NumLock to control the mouse cursor with the numpad"
}

# prompt_yn "Prompt text?" return_variable
prompt_yn() {
    while true; do
        read -r -n1 -p "$1 [y/n] " yn
        case $yn in
            [Yy]* ) echo; eval "$2=1";  break;;
            [Nn]* ) echo; eval "$2=\"\""; break;;
            * ) echo "Please input Y or N";;
        esac
    done
}

mkqr() {
    echo "1: $1"
    if [[ "$2" != "" ]] ; then
        echo "2: $2"
    fi
    qrencode -m 2 -s 4 -o ~/.tmp/qrcode.png "$1"

    # convert ~/.tmp/qrcode.png

    feh ~/.tmp/qrcode.png
}

